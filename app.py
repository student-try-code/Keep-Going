import pandas as pd
import streamlit as st
import random
import re
import os

# === Load Excel ƒëa sheet ===
@st.cache_data(ttl=0)
def load_sheets(path):
    xls = pd.ExcelFile(path)
    return {sheet: xls.parse(sheet) for sheet in xls.sheet_names}

def reload_excel():
    global all_sheets, df_all
    all_sheets = load_sheets(excel_file)
    if sheet_name == 'All':
        df_all = pd.concat(all_sheets.values(), ignore_index=True)
    else:
        df_all = all_sheets[sheet_name]

excel_file = r"C:\Users\bena\OneDrive\BSNT Ngo·∫°i - S·∫£n UMP 2025\M√¥n 4 - S·∫£n ph·ª• khoa\(!) Si√™u c·∫•p luy·ªán ƒë·ªÅ\Ng√¢n h√†ng c√¢u h·ªèi m√¥n 4 full.xlsx"
image_folder = r"C:\Users\bena\OneDrive\BSNT Ngo·∫°i - S·∫£n UMP 2025\M√¥n 4 - S·∫£n ph·ª• khoa\(!) Si√™u c·∫•p luy·ªán ƒë·ªÅ\images"
all_sheets = load_sheets(excel_file)

# === Sidebar ƒëi·ªÅu khi·ªÉn ===
st.sidebar.title("T√πy ch·ªçn")
sheet_options = ['All'] + list(all_sheets.keys())
sheet_name = st.sidebar.selectbox("Ch·ªçn slide (sheet):", sheet_options)

if st.sidebar.button("üîÑ T·∫£i l·∫°i file Excel"):
    reload_excel()
    st.rerun()

available_topics = all_sheets[sheet_name]['CodeTopic'].dropna().unique().tolist() if sheet_name != 'All' else pd.concat(all_sheets.values(), ignore_index=True)['CodeTopic'].dropna().unique().tolist()
topic_options = ['All'] + sorted(available_topics)
selected_topic = st.sidebar.selectbox("Ch·ªçn CodeTopic:", topic_options)
search_term = st.sidebar.text_input("T√¨m t·ª´ kh√≥a trong Original (v√≠ d·ª•: 6123):").strip()
mode = st.sidebar.selectbox("Ch·ªçn ch·∫ø ƒë·ªô hi·ªÉn th·ªã c√¢u h·ªèi:", ["Ng·∫´u nhi√™n 1 c√¢u", "TƒÉng d·∫ßn theo Original", "Gi·∫£m d·∫ßn theo Original", "To√†n b·ªô kh√¥ng s·∫Øp x·∫øp"], index=1)
st.session_state.setdefault("show_note", True)
st.session_state.show_note = st.sidebar.checkbox("üìù Hi·ªán ghi ch√∫", value=st.session_state.show_note)

# === D·ªØ li·ªáu ch√≠nh ===
df_all = pd.concat(all_sheets.values(), ignore_index=True) if sheet_name == 'All' else all_sheets[sheet_name]
df = df_all[df_all['CodeTopic'] == selected_topic] if selected_topic != 'All' else df_all
if search_term:
    df = df[df['Original'].astype(str).str.contains(search_term, case=False, na=False)]

if df.empty:
    st.warning("Kh√¥ng c√≥ c√¢u h·ªèi ph√π h·ª£p v·ªõi l·ª±a ch·ªçn hi·ªán t·∫°i.")
    st.stop()

if 'random_index' not in st.session_state:
    st.session_state.random_index = 0
if 'last_mode' not in st.session_state:
    st.session_state.last_mode = ""

if mode == "Ng·∫´u nhi√™n 1 c√¢u":
    st.session_state.random_index = random.randint(0, len(df) - 1)
    df_sorted = df
    questions = [df_sorted.iloc[st.session_state.random_index].to_dict()]
elif mode == "TƒÉng d·∫ßn theo Original":
    df_sorted = df.sort_values(by='Original', ascending=True)
    if st.session_state.last_mode != mode:
        st.session_state.random_index = 0
    questions = [df_sorted.iloc[st.session_state.random_index].to_dict()]
    st.session_state.last_mode = mode
elif mode == "Gi·∫£m d·∫ßn theo Original":
    df_sorted = df.sort_values(by='Original', ascending=False)
    if st.session_state.last_mode != mode:
        st.session_state.random_index = 0
    questions = [df_sorted.iloc[st.session_state.random_index].to_dict()]
    st.session_state.last_mode = mode
else:
    df_sorted = df
    questions = df_sorted.to_dict(orient='records')

# === Hi·ªÉn th·ªã c√¢u h·ªèi ===
st.title("Luy·ªán ƒë·ªÅ tr·∫Øc nghi·ªám")
for q in questions:
    st.markdown(f"### {q['Original']}")

    text = q['Question']
    pattern = r"(?s)(.*?)\s+A\.\s+(.*?)\s+B\.\s+(.*?)\s+C\.\s+(.*?)\s+D\.\s+(.*?)\s*(?:E\.\s+(.*))?$"
    match = re.match(pattern, text)
    if match:
        question_text = match.group(1).strip()
        st.markdown(question_text)

        options = []
        for i, label in enumerate(['A', 'B', 'C', 'D', 'E']):
            content = match.group(i + 2)
            if content:
                options.append((label, f"{label}. {content.strip()}"))

        labels = [label for label, _ in options]
        display = [desc for _, desc in options]
        selected = st.radio("Ch·ªçn ƒë√°p √°n:", labels, format_func=dict(options).get, key=q['Original'] + '_select', horizontal=False)

        if st.button(f"Ki·ªÉm tra ƒë√°p √°n cho {q['Original']}"):
            correct = str(q['Anwser']) if pd.notna(q['Anwser']) else ""
            if correct == "":
                st.info("C√¢u h·ªèi n√†y ch∆∞a c√≥ ƒë√°p √°n trong file. Vui l√≤ng b·ªï sung sau.")
            elif selected == correct:
                st.success("\u2714 ƒê√∫ng r·ªìi!")
            else:
                st.error(f"\u2716 Sai! ƒê√°p √°n ƒë√∫ng l√†: {correct}")
    else:
        st.markdown(text)

    if mode in ["TƒÉng d·∫ßn theo Original", "Gi·∫£m d·∫ßn theo Original"]:
        col1, col2, col3, col4 = st.columns([1, 1, 1, 1])
        with col1:
            if st.button("‚èÆ C√¢u ƒë·∫ßu ti√™n"):
                st.session_state.random_index = 0
                st.rerun()
        with col2:
            if st.button("‚Üê C√¢u tr∆∞·ªõc"):
                st.session_state.random_index = max(0, st.session_state.random_index - 1)
                st.rerun()
        with col3:
            if st.button("‚Üí C√¢u ti·∫øp theo"):
                st.session_state.random_index += 1
                st.rerun()
        with col4:
            if st.button("‚è≠ C√¢u cu·ªëi c√πng"):
                st.session_state.random_index = len(df_sorted) - 1
                st.rerun()

    if pd.notna(q.get('H√¨nh')):
        try:
            img_path = os.path.join(image_folder, str(q['H√¨nh']).strip())
            if os.path.isfile(img_path):
                st.image(img_path, width=400)
            else:
                st.warning(f"Kh√¥ng t√¨m th·∫•y h√¨nh: {q['H√¨nh']}")
        except:
            st.warning(f"Kh√¥ng t·∫£i ƒë∆∞·ª£c h√¨nh: {q['H√¨nh']}")

    if st.session_state.show_note:
        st.markdown("#### ‚úèÔ∏è Ghi ch√∫ (Note)")
        edited_note = st.text_area("Nh·∫≠p ghi ch√∫ cho c√¢u n√†y:", value=q.get('Note') or "", key=q['Original'] + '_note', height=200)

        if st.button(f"üíæ L∆∞u ghi ch√∫ cho {q['Original']}"):
            df_index = df_all[df_all['Original'] == q['Original']].index
            if not df_index.empty:
                df_all.loc[df_index[0], 'Note'] = edited_note
                with pd.ExcelWriter(excel_file, engine='openpyxl', mode='w') as writer:
                    for sh in all_sheets:
                        df_sheet = all_sheets[sh]
                        df_sheet.to_excel(writer, sheet_name=sh, index=False)
                reload_excel()
                st.success("ƒê√£ l∆∞u ghi ch√∫ v√†o Excel.")
                st.rerun()
